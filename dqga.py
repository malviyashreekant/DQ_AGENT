import os
import yaml
from agents.profiler_agent import ProfilerAgent
from agents.llm_ruleagent import LLMRuleAgentOllama
from agents.rule_agent import RuleAgent
from agents.summarizeagent import SummaryAgent

# Step 1: Load the dataset
profiler = ProfilerAgent("data/claims.csv")
df = profiler.get_dataframe()

# Step 2: Generate rules using Llama 3
llm_agent = LLMRuleAgentOllama(df, model="llama3.2")
rules_yaml = llm_agent.generate_rules()
print("\n YAML rules generated by Llama 3:\n")
print(rules_yaml)

# Step 3: Save rules to file
rules_path = "rules/generated_claims_rules.yaml"
with open(rules_path, "w") as f:
    f.write(rules_yaml)
print(f"\n Rules saved to {rules_path}")

# Step 4: Reload and confirm parsed YAML
try:
    parsed_yaml = yaml.safe_load(open(rules_path, "r"))
    print("\nðŸ“„ Reloaded YAML structure:\n", parsed_yaml)
except Exception as e:
    print("Error reading saved YAML:", e)

# Step 5: Validate using RuleAgent (uses static hand-written rules for now)
# You can later connect this to parsed_yaml for dynamic rule enforcement
print("\n Running rule-based data validation...\n")
rule_agent = RuleAgent(df, "rules/claims_rules.yaml")  # Static YAML for now
issues = rule_agent.validate()

# Step 6: Show issues found
if issues:
    print("\n Data Quality Issues:")
    for issue in issues:
        print(f"Row {issue[0]} | Column: {issue[1]} | Rule Failed: {issue[2]}")
else:
    print("\n No rule violations detected.")

# Step 7: Summarize issues using Llama 3
print("\n Summary and Recommendations by Llama 3:\n")
summary_agent = SummaryAgent(model="llama3")
summary = summary_agent.summarize_issues(issues)
print(summary)
